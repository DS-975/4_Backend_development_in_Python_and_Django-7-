# База данных, связи, ключи пройдены, пора вернуться к нашему Django-проекту.
#
# В этом юните мы разберёмся с такими вещами, как:
#
# Django-проекты;
# подробнее поговорим про приложения;
# MVC и MTV шаблоны;
# подключение к базе данных;
# модели и что они скрывают.
# Django-проекты
#
# Потихоньку подбираемся к самому интересному — работе с Django!
#
# Почему все так любят фреймворки? Казалось бы, они создают обёртки для более
# низкоуровневых функций, а также функционал для работы с ними. И с такой
# точки зрения интерес вызван ленивостью программистов — гораздо проще и
# быстрее написать несколько десятков строк с помощью интуитивно понятного
# функционала, чем писать сотни строк более низкоуровневого кода. Однако
# лень программистов — это не единственная причина. Фреймворки, и в
# частности Django, дают не просто удобный функционал, а ещё и такой,
# который позволяет с минимальными усилиями решать распространённые
# задачи. Этим и определяется сам фреймворк — удобство и простота
# использования для решения «повседневных» задач.
#
# Представьте, что вы уже senior-разработчик (слегка заглянем в будущее!),
# и перед вами и вашей командой стоит задача разработки какой-нибудь сложной
# корпоративной системы. Эта система является комплексом различных частей,
# иногда даже не связанных между собой. Или связанных, но косвенно. Например,
# в этой корпоративной системе могут быть разделы «Личный кабинет»,
# «Документооборот», «Финансы», «Календарь (планирование)», «Новости
# для сотрудников», «Чат» и др. Естественно предполагать, что они
# являются частью целого, но каждый из них выполняет свою, почти
# независимую, часть технического задания. На сайте интернет-магазина
# мы можем видеть «Личный кабинет», «Каталог товаров», «Корзина»,
# а на обучающей платформе, опять же «Личный кабинет», но также и
# «Каталог курсов», «Курс» (показывает и позволяет оперировать
# самим курсом — записываться и отписываться, смотреть информацию
# и т. д.) и, возможно, что-то ещё.
#
# Чувствуете связь между всеми этими примерами? Мы разбивали один
# большой проект на несколько модулей, каждый из которых слабо
# связан с другими. Естественно, что они оперируют общими данными
# и служат для выполнения общей задачи проекта. Однако каждый из
# них берёт на себя вполне независимую подзадачу и реализует её.
# Именно этот принцип лежит в основе создания проектов на Django.

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/f613fa400aa8bc80a5ab032767125309/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_1.png

# Каждый Django-проект состоит из одного и более модулей — приложений.
# И их назначение в точности соответствует тому, что мы обсуждали на
# примерах до этого. Ниже приведена структура приложений реального
# боевого проекта на Django. Это веб-приложение реализует интерфейс
# для прохождения тестов по школьным предметам, и его уникальность
# и сложность в том, что тесты формируются для каждого ученика в
# зависимости от его успеваемости.
#
# Давайте посмотрим, какие приложения были созданы:
#
# accounts — профили пользователей и всё, что с ними связано;
# courses — о курсах, темах, а также функционал банка заданий;
# events — система создания тестов, а также управления видеоуроками;
# study — приложение, которое управляет образовательным процессом со стороны ученика;
# students — приложение, с помощью которого методисты и преподаватели могут отслеживать прогресс студентов.

# Как видите, все они сильно взаимосвязаны, но каждый по отдельности выполняет только свою часть «работы».

# Задание 2.4.1
#
# Для чего предназначены Django-приложения?
# Для быстроты работы всего проекта
# Для защищённости проекта от взломов и хакерских атак
# Для декомпозирования задач проекта и удобства использования +
# Для ускорения сроков работы по проекту

# Приложения

# Разбавим теоретическую часть небольшой практикой.
# В одном из скринкастов предыдущего модуля вы создавали пустой проект.
# Давайте проделаем это снова, чтобы по ходу текущего модуля частично
# создать проект новостного портала.
#
# Создаём виртуальное окружение:
#
# $ python3 -m venv venv
# Для Windows:
#
# python -m venv venv
# Заходим в него:
#
# ~/django-projects $ source venv/bin/activate
# Для Windows:
#
# venv\scripts\activate
# Устанавливаем Django в свежее виртуальное окружение:
#
# (venv) ~/django-projects $ pip3 install django
# Для Windows:
#
# pip install django
# И запускаем команду создания проекта:
#
# (venv) ~/django-projects $ django-admin startproject NewsPaper
# Переходим в директорию проекта:
#
# (venv) ~/django-projects $ cd NewsPaper
# Здесь мы видим замечательный файл manage.py, который является точкой входа для управления проектом.
# Также через консоль запустим следующую команду, которая создаст новое приложение news.
#
# (venv) ~/django-projects/NewsPaper $ python3 manage.py startapp news
# Здесь мы использовали команду startapp из скрипта manage.py. В качестве параметра этой команды
# мы должны указать название нового приложения — news. Мы можем увидеть новую директорию, в
# которой есть большое количество файлов.

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/a2e1c1e89597e61e76f4b044520ae75d/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_2.png

# Django автоматически создал основные необходимые файлы для нового приложения.
# Чтобы это приложение стало частью этого проекта, мы должны его добавить
# в установленные приложения.
#
# Перейдем в файл NewsPaper/settings.py и найдём там список INSTALLED_APPS:

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/71f776bd9bd09fc63f41f83b5afda5aa/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_3.png

# Здесь мы должны добавить новый элемент в этот список — строку с названием
# приложения, которое совпадает с названием директории. Это позволит Django
# обнаружить созданное нами приложение.

# Задание 2.4.2

# Создайте приложение accounts и добавьте его в установленные приложения в настройках проекта.

# Файловая система:

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/4592a9957e3e20ccba1c73275077694f/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_4.png

# Файл настроек settings.py:

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/ffc99a06c23b63b8af113ed8908952b2/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_5.png

# Обучение в онлайне требует умения концентрироваться. Одно дело выделить время на обучение,
# другое — использовать это время максимально эффективно. Для этого следует минимизировать все
# отвлекающие моменты. Мы советуем во время обучения не включать телевизор/радио, по возможности,
# отключить звуковые уведомления на телефоне, да и вообще лучше отложить телефон подальше :).
# Если в месте, где вы занимаетесь, находятся другие люди, попросите их не отвлекать вас какое-то
# время.
#
# MVC или MTV — вот в чём вопрос
# Теперь снова немного к теории, чтобы понять, как устроен Django. Проекты в Django, как мы уже
# говорили, модульные. Однако внутреннее устройство каждого приложения не является
# произвольным — оно соответствует определённым шаблонам проектирования.
#
# При проектировании приличной части веб-приложений применяется шаблон Model-View-Controller — MVC.

# https://lms-cdn.skillfactory.ru/assets/courseware/v1/c3aa91809d108e192b1c29b994e6b0f6/asset-v1:SkillFactory+FPW-2.0+27AUG2020+type@asset+block/FPW_D2.4_6.png

# Шаблон состоит из трёх основных частей:
#
# 1 Controller (контроллер).
#   Эта часть приложения отвечает за бизнес-логику. Оно определяет, что можно делать в том или ином веб-приложении: какие действия вообще могут быть, кто их может выполнять (доступ) и т. д.
# 2 Model (модель).
#   Здесь обеспечивается работа с данными: взаимодействие с базой данных, выгрузка данных оттуда, подготовка для последующей обработки в контроллере и всё-всё, что может быть связано напрямую с данными
# 3 View (представление).
#   Это визуал веб-приложения — конкретное отображение данных.

# С помощью этой структуры можно понять, как происходит взаимодействие с пользователем:
#
# 1 Пользователь посылает запрос на сервер. Например, «хочу получить последние 10 новостей».
# 2 Этот запрос принимает контроллер. Он понимает, что от него просят новости и должен их где-то получить.
# 3 Для этого он бежит к модели и сообщает ей: «Меня тут выгрузить новости попросили, но только последние 10, скинь, плиз». Модель обращается к базе данных и выгружает объекты сущности Articles (статьи). Естественно, что контроллеру не нужно всё, что хранится в каждой из 10 строк, но ему нужен, наверняка заголовок, текст и дата. Он берёт именно их и отдаёт контроллеру.
# 4 Счастливый контроллер идет к представлению, передаёт ему то, что забрал у модели и говорит: «Сделай так, чтобы красиво и понятно».
# 5 Представление покрутило у виска строчками кода и отправило красиво оформленную страничку пользователю.

